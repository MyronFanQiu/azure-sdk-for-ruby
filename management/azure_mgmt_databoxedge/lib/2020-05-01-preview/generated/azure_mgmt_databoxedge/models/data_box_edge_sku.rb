# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataBoxEdge::Mgmt::V2020_05_01_preview
  module Models
    #
    # The Sku information.
    #
    class DataBoxEdgeSku

      include MsRestAzure

      # @return [String] The type of the resource.
      attr_accessor :resource_type

      # @return [SkuName] The Sku name. Possible values include: 'Gateway',
      # 'Edge', 'TEA_1Node', 'TEA_1Node_UPS', 'TEA_1Node_Heater',
      # 'TEA_1Node_UPS_Heater', 'TEA_4Node_Heater', 'TEA_4Node_UPS_Heater',
      # 'TMA', 'TDC', 'TCA_Large', 'TCA_Small', 'GPU'
      attr_accessor :name

      # @return [String] The Sku kind.
      attr_accessor :kind

      # @return [SkuTier] The Sku tier. Possible values include: 'Standard'
      attr_accessor :tier

      # @return [String] The Sku kind.
      attr_accessor :size

      # @return [String] The Sku family.
      attr_accessor :family

      # @return [Array<String>] Availability of the Sku for the region.
      attr_accessor :locations

      # @return [Array<String>] The API versions in which Sku is available.
      attr_accessor :api_versions

      # @return [Array<SkuLocationInfo>] Availability of the Sku for the
      # location/zone/site.
      attr_accessor :location_info

      # @return [Array<SkuCost>] The pricing info of the Sku.
      attr_accessor :costs

      # @return [Array<SkuRestriction>] Restriction info of the SKU.
      attr_accessor :restrictions

      # @return [SkuSignupOption] Can the SKU be signed up. Possible values
      # include: 'None', 'Available'
      attr_accessor :signup_option

      # @return [SkuVersion] Sku version. Possible values include: 'Stable',
      # 'Preview'
      attr_accessor :version

      # @return [SkuAvailability] Is SKU available. Possible values include:
      # 'Available', 'Unavailable'
      attr_accessor :availability


      #
      # Mapper for DataBoxEdgeSku class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'DataBoxEdgeSku',
          type: {
            name: 'Composite',
            class_name: 'DataBoxEdgeSku',
            model_properties: {
              resource_type: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'resourceType',
                type: {
                  name: 'String'
                }
              },
              name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'name',
                type: {
                  name: 'String'
                }
              },
              kind: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'kind',
                type: {
                  name: 'String'
                }
              },
              tier: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'tier',
                type: {
                  name: 'String'
                }
              },
              size: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'size',
                type: {
                  name: 'String'
                }
              },
              family: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'family',
                type: {
                  name: 'String'
                }
              },
              locations: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'locations',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              },
              api_versions: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'apiVersions',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              },
              location_info: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'locationInfo',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'SkuLocationInfoElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'SkuLocationInfo'
                      }
                  }
                }
              },
              costs: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'costs',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'SkuCostElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'SkuCost'
                      }
                  }
                }
              },
              restrictions: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'restrictions',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'SkuRestrictionElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'SkuRestriction'
                      }
                  }
                }
              },
              signup_option: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'signupOption',
                type: {
                  name: 'String'
                }
              },
              version: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'version',
                type: {
                  name: 'String'
                }
              },
              availability: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'availability',
                type: {
                  name: 'String'
                }
              }
            }
          }
        }
      end
    end
  end
end
